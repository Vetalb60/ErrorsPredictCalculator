// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDeleteID(params *DeleteDeleteIDParams, opts ...ClientOption) (*DeleteDeleteIDOK, error)

	Get(params *GetParams, opts ...ClientOption) (*GetOK, error)

	GetHealthz(params *GetHealthzParams, opts ...ClientOption) (*GetHealthzOK, error)

	PostMethodID(params *PostMethodIDParams, opts ...ClientOption) (*PostMethodIDOK, error)

	PostUpload(params *PostUploadParams, opts ...ClientOption) (*PostUploadOK, error)

	GetList(params *GetListParams, opts ...ClientOption) (*GetListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteDeleteID deletes file from database
*/
func (a *Client) DeleteDeleteID(params *DeleteDeleteIDParams, opts ...ClientOption) (*DeleteDeleteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeleteIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDeleteID",
		Method:             "DELETE",
		PathPattern:        "/delete/{id}",
		ProducesMediaTypes: []string{"application/json",},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeleteIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDeleteIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDeleteID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Get checks healthz of implemented server
*/
func (a *Client) Get(params *GetParams, opts ...ClientOption) (*GetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Get",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHealthz checks healthz of implemented server
*/
func (a *Client) GetHealthz(params *GetHealthzParams, opts ...ClientOption) (*GetHealthzOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthzParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHealthz",
		Method:             "GET",
		PathPattern:        "/healthz",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHealthzReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHealthzOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHealthz: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostMethodID calculates energy of error selected method of predict
*/
func (a *Client) PostMethodID(params *PostMethodIDParams, opts ...ClientOption) (*PostMethodIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMethodIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostMethodID",
		Method:             "POST",
		PathPattern:        "/method/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostMethodIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMethodIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostMethodID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUpload uploads a file
*/
func (a *Client) PostUpload(params *PostUploadParams, opts ...ClientOption) (*PostUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUploadParams()
	}

	op := &runtime.ClientOperation{
		ID:                 "PostUpload",
		Method:             "POST",
		PathPattern:        "/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostUploadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}

	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}

	success, ok := result.(*PostUploadOK)
	if ok {
		return success, nil
	}

	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	fmt.Sprintf("unexpected success response for PostUpload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(err)
}

/*
  GetList gets files list from database
*/
func (a *Client) GetList(params *GetListParams, opts ...ClientOption) (*GetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetList",
		Method:             "GET",
		PathPattern:        "/files",
		ProducesMediaTypes: []string{"application/json", "multipart/form-data"},
		ConsumesMediaTypes: []string{"application/json","multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
