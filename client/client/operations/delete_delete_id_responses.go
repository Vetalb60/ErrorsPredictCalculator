// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"exec/client/models"
)

// DeleteDeleteIDReader is a Reader for the DeleteDeleteID structure.
type DeleteDeleteIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDeleteIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDeleteIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteDeleteIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDeleteIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteDeleteIDOK creates a DeleteDeleteIDOK with default headers values
func NewDeleteDeleteIDOK() *DeleteDeleteIDOK {
	return &DeleteDeleteIDOK{}
}

/* DeleteDeleteIDOK describes a response with status code 200, with default header values.

successful response
*/
type DeleteDeleteIDOK struct {
	Payload *models.DeleteKey
}

func (o *DeleteDeleteIDOK) Error() string {
	return fmt.Sprintf("[DELETE /delete/{id}][%d] deleteDeleteIdOK  %+v", 200, o.Payload)
}
func (o *DeleteDeleteIDOK) GetPayload() *models.DeleteKey {
	return o.Payload
}

func (o *DeleteDeleteIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDeleteIDBadRequest creates a DeleteDeleteIDBadRequest with default headers values
func NewDeleteDeleteIDBadRequest() *DeleteDeleteIDBadRequest {
	return &DeleteDeleteIDBadRequest{}
}

/* DeleteDeleteIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteDeleteIDBadRequest struct {
	Payload *models.Error
}

func (o *DeleteDeleteIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /delete/{id}][%d] deleteDeleteIdBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteDeleteIDBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDeleteIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDeleteIDInternalServerError creates a DeleteDeleteIDInternalServerError with default headers values
func NewDeleteDeleteIDInternalServerError() *DeleteDeleteIDInternalServerError {
	return &DeleteDeleteIDInternalServerError{}
}

/* DeleteDeleteIDInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type DeleteDeleteIDInternalServerError struct {
	Payload *models.Error
}

func (o *DeleteDeleteIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /delete/{id}][%d] deleteDeleteIdInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteDeleteIDInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteDeleteIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
