// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Array array
//
// swagger:model Array
type Array [][]*ArrayItems0

// Validate validates this array
func (m Array) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		for ii := 0; ii < len(m[i]); ii++ {
			if swag.IsZero(m[i][ii]) { // not required
				continue
			}

			if m[i][ii] != nil {
				if err := m[i][ii].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName(strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName(strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this array based on the context it is used
func (m Array) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		for ii := 0; ii < len(m[i]); ii++ {

			if m[i][ii] != nil {
				if err := m[i][ii].ContextValidate(ctx, formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName(strconv.Itoa(i) + "." + strconv.Itoa(ii))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName(strconv.Itoa(i) + "." + strconv.Itoa(ii))
					}
					return err
				}
			}

		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ArrayItems0 array items0
//
// swagger:model ArrayItems0
type ArrayItems0 struct {

	// file size
	FileSize int64 `json:"file_size,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// insert data
	InsertDate string `json:"insert_data,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this array items0
func (m *ArrayItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this array items0 based on context it is used
func (m *ArrayItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArrayItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArrayItems0) UnmarshalBinary(b []byte) error {
	var res ArrayItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
